//Maximum XOR Subarray

#include<bits/stdc++.h>
using namespace std;
//class for trie evert element
class trie
{
	public:
		trie* left;
	    trie* right;
};
void insert(trie *head,int n)
{

	trie* curr=head;
	for(int i=31;i>=0;i--)
	{
		int b=(n>>i)&1;
		if(b==0)
		{
			if(!curr->left)
			{
				//if left part not exist ,,then we creat new left part
				curr->left=new trie();
			}
			curr=curr->left;
		}
		else
		{
			if(!curr->right)
			{
				//if right part not exist,, then we creat new right part
				curr->right=new trie();
			}
			curr=curr->right;
		}
	}
}
int max_pair(trie* head,int *arr,int size)
{

	int max_val=INT_MIN;
	for(int i=0;i<size;i++)
	{
		
		int ele=arr[i];//pick array element one by one
		trie* curr=head;//start with trie head(IMPORTENT PART)
		int curr_val=0;
		for(int j=31;j>=0;j--)
		{
			int b=(ele>>j)&1;
			if(b==0)
			{
				//if bit is 0 ,then we travel right i.e. 1
				if(curr->right)
				{
					curr_val+=pow(2,j);
					curr=curr->right;
				}
				else
				{
					//if right not exist
					curr=curr->left;
				}
			}
			else
			{
				//if bit is 1 ,then we travel left i.e. 0
				if(curr->left)
				{
					curr_val+=pow(2,j);
					curr=curr->left;
				}
				else
				{
					//if left side not exist
					curr=curr->right;
				}
			}
		}
		max_val=max(max_val,curr_val);
	}
	return max_val;
}
int main()
{
	int n;
	cin>>n;//enter the size of array
	int arr[n];
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
	}
	trie *head=new trie();//creat the head(root) part of an array
	for(int i=0;i<n;i++)//insert all value of array in trie
	{
		insert(head,arr[i]);
	}
    
	cout<<max_pair(head,arr,n);//find maximum value of pair of array
	return 0;
}
